#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('demo:server');
var http = require('http');
const https = require('https');
const fs = require('fs');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
// app.set('port', port);

/**
 * Create HTTP server.
 */
// 读取 SSL 私钥文件
const privateKey = fs.readFileSync(__dirname + '/server.key', 'utf8');

// 读取服务器证书文件
const serverCert = fs.readFileSync(__dirname + '/server.pem', 'utf8');

// 读取根证书或中间证书文件
const caCert = fs.readFileSync(__dirname + '/ca.cer', 'utf8');

// var server = https.createServer({
//   key: privateKey,
//   cert: serverCert,
//   ca: caCert, // 可选：如果服务器证书是由中间证书签发的，需要加上中间证书
//   rejectUnauthorized: false 
// }, app.callback());

var server = http.createServer(app.callback());

/**
 * Listen on provided port, on all network interfaces.
 */
// let IP = process.env.NODE_ENV === 'development' ? process.env.IP : "47.120.55.140"
let IP = process.env.IP
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
